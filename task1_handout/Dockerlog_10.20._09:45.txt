[?2004h(base) ]0;mambauser@f203ba617836: /codemambauser@f203ba617836:/code$ git[K[K[Kpython /results/checker_client.py 
[?2004l
 Setting model with n_restart =  0

 Taking a random subset of the training data 


 ----- Fitting the GP with 10%-------

Iter 1/100. Curr params [.., prob length scale]: [-3.42690722], neg llh: 149328.9599029139
Iter 2/100. Curr params [.., prob length scale]: [-3.44580753], neg llh: 149036.91829466465
Iter 3/100. Curr params [.., prob length scale]: [-3.47131644], neg llh: 148891.67188940672
Iter 4/100. Curr params [.., prob length scale]: [-3.47159956], neg llh: 148891.6541739826
Iter 5/100. Curr params [.., prob length scale]: [-3.47160189], neg llh: 148891.6541729066

 You did not beat the easy baseline in terms of public cost. Try to improve your solution. Your public cost is 172.190 and the easy baseline is 45.480
Dumped check file to /results/results_check.byte
[?2004h(base) ]0;mambauser@f203ba617836: /codemambauser@f203ba617836:/code$ python /results/checker_client.py 
[?2004l
 Setting model with n_restart =  0

 Taking a random subset of the training data 


 ----- Fitting the GP with 10%-------

07:46:48 Iter 1/100. Curr params [.., prob length scale]: [-3.44319147], neg llh: 155546.66057330585
07:46:50 Iter 2/100. Curr params [.., prob length scale]: [-3.46188107], neg llh: 155241.6522315459
07:46:52 Iter 3/100. Curr params [.., prob length scale]: [-3.48839952], neg llh: 155080.218150931
07:46:54 Iter 4/100. Curr params [.., prob length scale]: [-3.48867976], neg llh: 155080.19984372516
07:46:55 Iter 5/100. Curr params [.., prob length scale]: [-3.48868712], neg llh: 155080.19983672982

 You did not beat the easy baseline in terms of public cost. Try to improve your solution. Your public cost is 122.316 and the easy baseline is 45.480
Dumped check file to /results/results_check.byte
[?2004h(base) ]0;mambauser@f203ba617836: /codemambauser@f203ba617836:/code$ python /results/checker_client.py 
[?2004l
 Setting model with n_restart =  0

 Taking a random subset of the training data 


 ----- Fitting the GP with 10%-------

09:50:55 Iter 1/100. Curr params [.., prob length scale]: [-3.42775098], neg llh: 151187.70724094013
09:50:57 Iter 2/100. Curr params [.., prob length scale]: [-3.44933188], neg llh: 150797.11933898705
09:50:59 Iter 3/100. Curr params [.., prob length scale]: [-3.47931205], neg llh: 150595.75275066012
09:51:01 Iter 4/100. Curr params [.., prob length scale]: [-3.47965397], neg llh: 150595.72699279003
09:51:06 Iter 5/100. Curr params [.., prob length scale]: [-3.47965496], neg llh: 150595.72699224952

 You did not beat the easy baseline in terms of public cost. Try to improve your solution. Your public cost is 152.545 and the easy baseline is 45.480
Dumped check file to /results/results_check.byte
[?2004h(base) ]0;mambauser@f203ba617836: /codemambauser@f203ba617836:/code$ python /results/checker_client.py 
[?2004l
 Setting model with n_restart =  0

 Taking a random subset of the training data 


 ----- Fitting the GP with 70%-------

09:54:55 Iter 1/100. Curr params [.., prob length scale]: [-11.51292546], neg llh: 7684563.4254308315
/opt/conda/lib/python3.8/site-packages/sklearn/gaussian_process/kernels.py:419: ConvergenceWarning: The optimal value found for dimension 0 of parameter length_scale is close to the specified lower bound 1e-05. Decreasing the bound and calling fit again may find a better value.
  warnings.warn(

 You did not beat the easy baseline in terms of public cost. Try to improve your solution. Your public cost is 34365.881 and the easy baseline is 45.480
Dumped check file to /results/results_check.byte
[?2004h(base) ]0;mambauser@f203ba617836: /codemambauser@f203ba617836:/code$ python /results/checker_client.py 
[?2004l
 Setting model with n_restart =  0

 Taking a random subset of the training data 


 ----- Fitting the GP with 60%-------

09:58:15 Iter 1/100. Curr params [.., prob length scale]: [-5.35850081], neg llh: 1963551.8142361827
09:59:31 Iter 2/100. Curr params [.., prob length scale]: [-4.83369827], neg llh: 922255.5443640157
10:00:50 Iter 3/100. Curr params [.., prob length scale]: [-4.26074978], neg llh: 464252.6758767715
10:02:12 Iter 4/100. Curr params [.., prob length scale]: [-4.09232822], neg llh: 433263.37092093047
10:03:33 Iter 5/100. Curr params [.., prob length scale]: [-4.05167877], neg llh: 432031.18037664524
10:04:54 Iter 6/100. Curr params [.., prob length scale]: [-4.05136566], neg llh: 432031.1092032604
10:13:37 Iter 7/100. Curr params [.., prob length scale]: [-4.05136566], neg llh: 432031.10920325975

Congratulations, you beat the medium baseline in terms of public cost. However, you did not pass the hard baseline in terms of public cost. Try to improve your solution. Your public cost is 25.750 and the hard public baseline is 21.719
Dumped check file to /results/results_check.byte
[?2004h(base) ]0;mambauser@f203ba617836: /codemambauser@f203ba617836:/code$ git checkout main
[?2004lbash: git: command not found
[?2004h(base) ]0;mambauser@f203ba617836: /codemambauser@f203ba617836:/code$ gi[K[Kgit chce[K[K[K[K[K[K[K[Kexit
[?2004lexit
